/*******************************************************************************
 * Copyright 2017 Adobe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/"code": "/**\n * Design dialog:\n * - The options of the select field to define the default value are added/removed based on the status\n * of the size checkboxes\n * - Validation: if no size checkboxes are checked, the dialog cannot be saved\n *\n * Edit dialog:\n * - displays all the sizes if no sizes have been defined in the policy\n * - hides all the sizes if only one size has been defined in the policy\n * - displays all the sizes defined in the policy if there are at least two\n */\n(function($, Granite, ns, $document) {\n    \\"use strict\\";\n\n    var DEFAULT_SIZE_SELECTOR       = \\"coral-select.core-title-size-default\\";\n    var DEFAULT_SIZES_SELECTOR      = \\"coral-select.core-title-sizes-default\\";\n    var ALLOWED_SIZES_SELECTOR      = \\".core-title-sizes-allowed coral-checkbox\\";\n    var DATA_ATTR_VALIDATION_STATE  = \\"checkboxes.validation.state\\";\n    var SIZES_SELECTOR              = \\"coral-select.core-title-sizes\\";\n    var LINK_URL_SELECTOR           = \\".cmp-title-link-url\\";\n    var LINK_LABEL_SELECTOR         = \\".cmp-title-link-label\\";\n    var LINK_TITLE_SELECTOR         = \\".cmp-title-link-title\\";\n\n    // Update the select field that defines the default value\n    function updateDefaultSizeSelect(checkboxToggled) {\n\n        var select = $(DEFAULT_SIZE_SELECTOR).get(0);\n        var $checkboxes = $(ALLOWED_SIZES_SELECTOR);\n        var checkedTotal = 0;\n        var selectValue = \\"\\";\n\n        if (select === null || select === undefined) {\n            return;\n        }\n\n        // clear the select items to work around a Coral.Select issue (CUI-5584)\n        select.items.clear();\n\n        // for each checked checkbox, add an option to the default sizes dropdown\n        $checkboxes.each(function(i, checkbox) {\n            if (checkbox.checked) {\n                var newItem = new Coral.Select.Item();\n                newItem.content.textContent = Granite.I18n.getVar(checkbox.label.innerHTML);\n                newItem.value = Granite.I18n.getVar(checkbox.value);\n                select.items.add(newItem);\n                checkedTotal++;\n            }\n        });\n\n        // set the default value of the size dropdown\n        if (checkboxToggled) {\n            selectValue = getAppropriateCheckedBoxValue($checkboxes, select.value);\n        } else {\n            // the default value is read from the repository\n            selectValue = select.value;\n        }\n\n        // hide/show the select\n        // Note: we use Coral.commons.nextFrame to make sure that the select widget has been updated\n        Coral.commons.nextFrame(function() {\n            select.value = selectValue;\n            if (checkedTotal === 0 || checkedTotal === 1) {\n                $(select).parent().hide();\n            } else {\n                $(select).parent().show();\n            }\n        });\n    }\n\n    // get the appropriate checked box value by checking if the current value of the default type is a valid option in the list of allowed types/sizes\n    function getAppropriateCheckedBoxValue(checkboxes, currentDefaultTypeValue) {\n        var isCurrentDefaultTypeValueValidOption = false;\n        checkboxes.each(function(i, checkbox) {\n            if (checkbox.checked && checkbox.value === currentDefaultTypeValue) {\n                isCurrentDefaultTypeValueValidOption = true;\n                return false;\n            }\n        });\n        // if the current value of the default type is a valid option, it will return it\n        if (isCurrentDefaultTypeValueValidOption) {\n            return currentDefaultTypeValue;\n        } else {\n            // if the current value of the default type is a not valid option, it will return the value of the first checked box\n            var firstCheckedValue = \\"\\";\n            checkboxes.each(function(i, checkbox) {\n                if (checkbox.checked) {\n                    firstCheckedValue = checkbox.value;\n                    return false;\n                }\n            });\n            return firstCheckedValue;\n        }\n    }\n})"\n}""code": "// toggles the disable attribute of the Link Label and Link Title Attribute inputs, based on the Link Url existence\\n    function toggleDisableAttributeOnLinkLabelAndTitleInputs() {\\n        $(LINK_LABEL_SELECTOR).prop(\\"disabled\\", !$(LINK_URL_SELECTOR).val());\\n        $(LINK_TITLE_SELECTOR).prop(\\"disabled\\", !$(LINK_URL_SELECTOR).val());\\n    }\\n\\n    // temporary workaround until CQ-4206495 and CUI-1818 are fixed:\\n    // add a margin when opening the dropdown\\n    $document.on(\\"coral-select:showitems\\", DEFAULT_SIZE_SELECTOR, function(e) {\\n        var select = e.currentTarget;\\n        var buttonHeight = $(select).find(\\"button\\").outerHeight(true);\\n        var count = select.items.length;\\n        var totalHeight = count * (buttonHeight + 5);\\n        var maxHeight = parseInt($(select).find(\\"coral-selectlist\\").css(\\"max-height\\"), 10);\\n        var marginBottom = Math.min(totalHeight, maxHeight);\\n        $(select).css(\\"margin-bottom\\", marginBottom);\\n    });\\n\\n    // temporary workaround until CQ-4206495 and CUI-1818 are fixed:\\n    // remove the margin when closing the dropdown\\n    $document.on(\\"coral-select:hideitems\\", DEFAULT_SIZE_SELECTOR, function(e) {\\n        var select = e.currentTarget;\\n        $(select).css(\\"margin-bottom\\", 0);\\n    });\\n\\n    // Update the default size select when an allowed size is checked/unchecked\\n    $document.on(\\"change\\", ALLOWED_SIZES_SELECTOR, function(e) {\\n        updateDefaultSizeSelect(true);\\n    });\\n\\n    $document.on(\\"foundation-contentloaded\\", function(e) {\\n        // Update the default size select when the design title dialog is opened\\n        Coral.commons.ready($(ALLOWED_SIZES_SELECTOR), function(component) {\\n            updateDefaultSizeSelect(false);\\n        });\\n\\n        // Hide/display the edit dialog size dropdown\\n        Coral.commons.ready($(SIZES_SELECTOR, DEFAULT_SIZES_SELECTOR), function(component) {\\n            var select = $(SIZES_SELECTOR).get(0);\\n            var defaultSelect = $(DEFAULT_SIZES_SELECTOR).get(0);\\n            if (select === null || select === undefined || defaultSelect === null || defaultSelect === undefined) {\\n                return;\\n            }\\n            var itemsCount = select.items.getAll().length;\\n            if (itemsCount === 0) {\\n                // display all the sizes\\n                $(select).parent().remove();\\n            } else if (itemsCount === 1) {\\n                // don't display anything\\n                $(select).parent().remove();\\n                $(defaultSelect).parent().remove();\\n            } else {\\n                // display the values defined in the design policy\\n                $(defaultSelect).parent().remove();\\n            }\\n        });\\n        Coral.commons.ready($(LINK_URL_SELECTOR, LINK_LABEL_SELECTOR, LINK_TITLE_SELECTOR), function(component) {\\n            toggleDisableAttributeOnLinkLabelAndTitleInputs();\\n        });\\n    });\\n\\n    $(document).on(\\"input\\", LINK_URL_SELECTOR, function(input) {\\n        $(LINK_URL_SELECTOR).val(input.target.value);\\n        toggleDisableAttributeOnLinkLabelAndTitleInputs();\\n    });\\n\\n    $(document).on(\\"change\\", LINK_URL_SELECTOR, function(input) {\\n        toggleDisableAttributeOnLinkLabelAndTitleInputs();\\n    });\\n\\n    // Display an error if all checkboxes are empty\\n    $(window).adaptTo(\\"foundation-registry\\").register(\\"foundation.validation.validator\\", {\\n        selector: ALLOWED_SIZES_SELECTOR,\\n        validate: function(el) {\\n\\n            var $checkboxes = $(el).parent().children(ALLOWED_SIZES_SELECTOR);\\n            var firstEl = $checkboxes.get(0);\\n            var isValid = $(firstEl).data(DATA_ATTR_VALIDATION_STATE);\\n            var validationDone = isValid !== undefined;\\n\\n            // if the validation has already been done, we get the status from the first checkbox\\n            if (validationDone) {\\n                $(firstEl).removeData(DATA_ATTR_VALIDATION_STATE);\\n                if (!isValid) {\\n                    return Granite.I18n.get(\\"Select at least one size option.\\");\\n                } else {\\n                    return;\\n                }\\n            }"\n}""code": "// set the validation status on the first checkbox\\n            isValid = false;\\n            $checkboxes.each(function(i, checkbox) {\\n                if (checkbox.checked) {\\n                    isValid = true;\\n                    return false;\\n                }\\n            });\\n            $(firstEl).data(DATA_ATTR_VALIDATION_STATE, isValid);\\n\\n            // trigger the validation on the first checkbox\\n            var api = $(firstEl).adaptTo(\\"foundation-validation\\");\\n            api.checkValidity();\\n            api.updateUI();\\n        },\\n        show: function(el, message) {\\n            var $el = $(el);\\n\\n            var fieldAPI = $el.adaptTo(\\"foundation-field\\");\\n            if (fieldAPI && fieldAPI.setInvalid) {\\n                fieldAPI.setInvalid(true);\\n            }\\n\\n            var error = $el.data(\\"foundation-validation.internal.error\\");\\n\\n            if (error) {\\n                error.content.innerHTML = Granite.I18n.getVar(message);\\n\\n                if (!error.parentNode) {\\n                    $el.after(error);\\n                    error.show();\\n                }\\n            } else {\\n                error = new Coral.Tooltip();\\n                error.variant = \\"error\\";\\n                error.interaction = \\"off\\";\\n                error.placement = \\"bottom\\";\\n                error.target = el;\\n                error.content.innerHTML = Granite.I18n.getVar(message);\\n                error.open = true;\\n                error.id = Coral.commons.getUID();\\n\\n                $el.data(\\"foundation-validation.internal.error\\", error);\\n                $el.after(error);\\n            }\\n        }\\n    });\\n\\n}(jQuery, Granite, Granite.author, jQuery(document)));"\n}"